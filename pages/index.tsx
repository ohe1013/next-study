import Head from 'next/head'
import Layout from 'components/layout'
import Programmer from 'components/programmer'
import { Client } from '@notionhq/client'
import { TOKEN, DATABASE_ID, DATABASE_ID_USER } from '../config/index'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import styled from 'styled-components'
type User = {
  [name: string]: {
    up: number
    id: string
  }
}
import Input from 'components/basic/Input'

export default function Home({ users }: { users: User }) {
  const uesrNameArr = Object.keys(users)
  const [userName, setUserName] = useState<string>('')
  const onChangeUserName = (e: any) => {
    setUserName(e.target.value)
  }
  const validName = (name: string) => {
    return uesrNameArr.includes(name)
  }

  return (
    <div className="bg-primary">
      <Layout>
        <Head>
          <title>회식 투표 앱</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <section className="flex min-h-screen flex-col items-center text-gray-600 body-font">
          <div className="container mx-auto flex px-5 py-24 flex-col items-center">
            <section className="text-gray-600 body-font">
              <div className="container mx-auto flex px-5 py-24 md:flex-row flex-col items-center">
                <div className="lg:max-w-lg lg:w-full md:w-1/2 w-5/6 mb-10 md:mb-0">
                  <img height={200} src="/assets/isu.jpeg"></img>
                </div>
                <div className="lg:flex-grow md:w-1/2 lg:pl-24 md:pl-16 flex flex-col md:items-start md:text-left items-center text-center">
                  <h1 className="title-font sm:text-4xl text-3xl mb-4 font-medium text-gray-900">
                    신나는 이수 모임
                  </h1>
                  <div className="leading-relaxed">
                    추천 1회, 비추천 1회 가능합니다.
                  </div>
                  <div className="mb-8 leading-relaxed text-red-300">
                    *추천은 1회만 가능하며, 한번 선택하시고 무를 수 없습니다.
                  </div>
                  <div className="flex w-full md:justify-start justify-center items-end">
                    <div className="relative mr-4 lg:w-full xl:w-1/2 w-2/4">
                      <label
                        htmlFor="hero-field"
                        className="leading-7 text-sm text-gray-600"
                      >
                        이름
                      </label>
                      <input
                        type="text"
                        id="hero-field"
                        name="hero-field"
                        className="w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:ring-2 focus:ring-indigo-200 focus:bg-transparent focus:border-indigo-500 text-base outline-none text-gray-700 py-1 px-3 leading-8 transition-colors duration-200 ease-in-out"
                        required
                        value={userName}
                        onChange={onChangeUserName}
                      />
                    </div>
                    {uesrNameArr.includes(userName) ? (
                      <Link
                        className="inline-flex text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg"
                        rel="preload"
                        href={{
                          pathname: './main',
                          query: {
                            name: userName,
                            up: users[userName].up,
                            id: users[userName].id,
                          },
                        }}
                      >
                        입장
                      </Link>
                    ) : (
                      <button
                        type="submit"
                        className="inline-flex text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg"
                      >
                        입장
                      </button>
                    )}
                  </div>
                </div>
                <FormContainer>
                  <Input
                    labelName="이름"
                    id="hero-field"
                    type="text"
                    value={userName}
                    onChange={onChangeUserName}
                  />
                  <Link
                    className="inline-flex text-white bg-indigo-500 border-0 py-2 px-6 focus:outline-none hover:bg-indigo-600 rounded text-lg"
                    rel="preload"
                    style={
                      validName(userName)
                        ? {}
                        : { pointerEvents: 'none', backgroundColor: 'gray' }
                    }
                    href={{
                      pathname: './main',
                      query: { name: userName, up: users[userName]?.up },
                    }}
                  >
                    입장
                  </Link>
                </FormContainer>
              </MainContents>
            </ContainerWrapper>
          </Container>
        </Wrapper>
      </Layout>
    </div>
  )
}

const Wrapper = styled.section`
  display: flex;
  height: 100vh;
  flex-direction: column;
  align-items: center;
  color: rgb(75, 85, 99);
`
const Container = styled.div`
  padding: 100px 20px;
  margin: 0 auto;
`
const ContainerWrapper = styled(Container)`
  display: flex;
  align-items: center;
`
const MainContents = styled.div`
  align-items: center;
  h1 {
    color: rgb(17, 24, 39);
    font-weight: 500;
    margin-bottom: 16px;
    font-size: 36px;
    line-height: 40px;
  }
`
const FormContainer = styled.div`
  justify-content: flex-start;
  align-items: flex-end;
  width: 100%;
  display: flex;
`

export async function getServerSideProps() {
  const notion = new Client({ auth: TOKEN })
  const result = await notion.databases.query({
    database_id: DATABASE_ID_USER!,
  })
  const _users = result.results
  const users: User = {}
  _users.forEach((_user: any) => {
    users[_user.properties.name.title[0].plain_text] = {
      up: _user.properties.up.number,
<<<<<<< HEAD
=======
      id: _user.id,
>>>>>>> e5bb53bc9054afbf42bf25bd4cf079179017c13d
    }
  })
  return {
    props: {
      users,
    },
  }
}
